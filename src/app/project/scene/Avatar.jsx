/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/Avatar1.glb 
*/
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Avatar(props) {
  const { scene } = useGLTF('models/Avatar1.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  // If your export ever includes more meshes, this future-proofs shadow flags:
  // (Safe to keep; no harm if only one skinnedMesh)
  React.useEffect(() => {
    clone.traverse((obj) => {
      if ('isMesh' in obj) {
        obj.castShadow = true
        obj.receiveShadow = true
      }
    })
  }, [clone])

  return (
    <group {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Avatar"
        geometry={nodes.Wolf3D_Avatar.geometry}
        material={materials.Wolf3D_Avatar}
        skeleton={nodes.Wolf3D_Avatar.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences}
        castShadow
        receiveShadow
      />
    </group>
  )
}

useGLTF.preload('models/Avatar1.glb')
